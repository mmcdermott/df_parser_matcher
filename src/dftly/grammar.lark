%import common.WS
%ignore WS
STRING: /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"/

PLUS: "+"
MINUS: "-"
AT: "@"
AS: /as/i
IF: /if/i
ELSE: /else/i
AND_SYM: "&&"
OR_SYM: "||"
NOT_SYM: "!"
AND.2: "and"i
OR.2: "or"i
NOT.2: "not"i
NAME: /[A-Za-z_][A-Za-z0-9_]*/
IN: /in/i
NUMBER: /\d+(?:\.\d+)?/
LPAR: "("
RPAR: ")"

start: expr
expr: parse_format
parse_format: conditional AS STRING -> parse_as_format
            | conditional
conditional: bool_expr IF bool_expr ELSE parse_format   -> ifexpr
          | bool_expr

?bool_expr: and_expr ((OR|OR_SYM) and_expr)*   -> or_expr
?and_expr: in_expr ((AND|AND_SYM) in_expr)*     -> and_expr
?in_expr: unary IN set_literal        -> value_in_set
        | unary IN range_literal      -> value_in_range
        | unary
?unary: (NOT|NOT_SYM) unary                    -> not_expr
      | additive

additive: at_expr op*
op: PLUS cast_expr     -> plus
  | MINUS cast_expr    -> minus
?at_expr: cast_expr AT cast_expr   -> resolve_ts
        | cast_expr
cast_expr: call_expr
         | NAME AS STRING  -> parse_as_format
         | NAME AS NAME   -> cast
         | NUMBER         -> number
         | STRING         -> string
         | NAME           -> name
         | "(" expr ")" -> paren_expr

call_expr: NAME "(" [args] ")"   -> func
args: expr ("," expr)*   -> arg_list

set_literal: "{" [args] "}"   -> literal_set

range_literal: "[" expr "," expr "]"   -> range_inc
             | "[" expr "," expr ")"   -> range_ie
             | "(" expr "," expr "]"   -> range_ei
             | "(" expr "," expr ")"   -> range_exc
